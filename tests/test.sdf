/*
    Examples/tests of sdf-lang
*/

// Fields must be typed. May have defaults. Final comma optional.
struct SomeStruct {
    field1: float = 2.3,
    no_default: int,
    another_default: int = 123,
    no_final_comma: int = 9,
    vec_field: vec4 = vec4(1),
}

// Struct implementations have a "self" reference
impl SomeStruct {
    fn some_function(self, some_input: float) -> float {
        let var: double = 1 - 1.2 as int * 3;
        
        // Member vec access and assignemnt
        self.vec_field.x = 2;
        self.vec_field.xy *= 2;

        return self.field1 * some_input;
    }

    fn member_stuff(self) {
        // Inferred from field
        let x = self.field1 + 3;
        // Inferred from member
        let y = self.some_function(1.2) * 3;

        self.some_function(1.);
        
        self.field1 += 3 - self.no_final_comma;
    }
}

fn float_function(x: vec4) -> float {
    return 1.2;
}

fn vectors() {
    // Type inferrence
    let w = bvec3(true, true, false);
    let x = vec2(1, 2);
    let y = vec4(1, 2, 3, 4);

    // Extension
    let z = ivec2(1); // == ivec2(1, 1)

    let v: uvec4;

    let a = x;
    a += 3;

    // Using expressions
    let b = 1.3;
    let c = vec3(b, 1.2 * 3., float_function(y)) / 3.;
    let d = vec3(3.1, vec2(3.2));

    // From smaller vecs
    let another = vec3(x, 1.);
    let more = vec4(another, 1.);
    let more2 = vec4(x, x);
    let more3 = vec4(x, 1., 1.);
}

fn swizzling() {
    // Building vecs from swizzles
    let a = vec3(2.);
    let b = vec4(a.x, a);
    let c = a.xy;
    let d = vec4(a.yz, c.yy);
    let e = b + d;
    let f = a + 1;
    let g = a.x * 3. + 3.;

    // Vec component assignment
    a.z = 2;
    a.xy += vec2(1., 2.);
    a.xyz *= 2;
    a.xz = vec2(1.);
    a.x = a.y - 2;
    // a.xy = 2;  <- cannot assign a vec2 to a single int
    // a.xx = 2; <- cannot assign the same component multiple times
}

fn builtins() {
    // Builtin functions are exactly the same as glsl
    // Only builtin functions can be overloaded

    let a = vec3(1, 2, 3);
    let b = length(a) - length(vec4(1)) + length(vec2(a.y));
    let c = mix(vec3(2.), vec3(0.1), 1 - exp(-0.001));
    let d = pow(c, vec3(0.45));
    let e = fract(sin(cos(123)));
    let f = pow(1, atan(1, 2.3));
    let g = mod(d.yx, 2);
    let h = min(max(a, c), distance(a, vec3(g, a.z)));
    let i = clamp(vec4(1, a), 2., 3);
    let j = smoothstep(b, c.x, a.zzy);
    let k = dot(a, cross(i.xyz, vec3(i.w)));
    // ... and more
}

fn loops() {
    let x = 0;
    let s = 2;

    // FIXME: For loops can only count up and use integers
    for i in s .. 10 {
        x += i;
    }

    // Only valid within a loop
    // break;

    // Break and continue work as expected
    while x <= 123 {
        while false {
            continue;
            x *= 100;
        }
        if x == 100 {
            break;
        }
        x += 5;
    }
}

fn void_function() {
    let z = 7;
    // Narrowing conversions require explicit casts
    let a: int = 123.2 as int;
    a += 0.5 as int;
}

fn int_function() -> int {
    return 12;
}

// Functions are the same as Rust
fn function(param1: float, param2: int) -> bool {
    // Parameters are added to the current scope
    param1 += 3;

    // Type inferrence
    let var = true;
    let z = 7.33;

    z = 12;
    z += z + 21 - -int_function();
    z *= 123;

    let inferred_from_variable = z + 5;

    // let inferred_from_function = void_function(); // cannot assign to void type
    let inferred_from_function = int_function() * 2;

    return 1 / 2 != 8.3 != !var;
}

fn constructors() {
    // Cannot use reserved prefix 'gl_'
    // let gl_variable = 12;

    // Uniforms are moved to global scope for GLSL, but only usable in declared scope
    @uniform
    let test: int = 8;

    // Constructors are automatically ordered and defaults are filled in (if not supplied)
    let some_struct: SomeStruct {
        another_default: 321,
        no_default: 7 + 3 - int_function(),
        field1: 12,
    };

    some_struct.some_function(test);

    function(1.3, -12);
}

fn bool_function() -> bool {
    return true;
}

fn if_expressions() {
    let x: int = 12;
    let y = 12;

    if x == y {
        let nested = 12;
        // Shadowing
        let x = 5;
        x += nested;
    } else if true {
        x -= 1;
    } else if false {
        if true {
            12;
        }
        false;
    } else {
        true;
    }

    if 1 == 1 && 2 == 2 {
        1 + 2;
    }

    // Conditions must be boolean types
    // if 1 + 2 {}
    if bool_function() {}
}

fn main() {
    // "out_color" is the output color for the fragment
    out_color = vec4(0.5, 0.5, 0.7, 1.);
}

// Scenes will allow for SDF interactions (point manipulation, etc.)
scene main {
    @uniform
    let x: int = 1 + -2 * 3;

    let s: SomeStruct {
        field1: x,
        no_default: x * 3,
        no_final_comma: 4 * 3 + 1
    };

    function(1.0, 2);

    let y: bool = true && false;
}