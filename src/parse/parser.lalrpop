use crate::parse::ast;
use crate::exit;

grammar();


match {
    // Do not allow "true" or "false" as identifiers. Make them literals.
    r"(true)|(false)" => BOOL,
    // Special case
    r"[a-z]?(vec)[1-4]" => VEC_IDENTIFIER,

    
    // TODO: This should not require an exact match (temporary solution)
    //       and should instead be checked by validator
    // Skip the header
    r"@((FRAGMENT)|(VERTEX)|(COMPUTE)|(LIB))" => { },

    
    // Ignore comments
    
    // from https://github.com/lalrpop/lalrpop/pull/509/commits/ee2f7060e99f902620ac4edeea5cfe3c3551f09c)
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { },
    // TODO: Look at this regex; it may do more than I want/need 
    // FIXME: In-line comments don't work
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { },
} else {
    _
}

// ---------------- AST ----------------

// This is the root of the AST (initial grammar symbol)
pub AST: ast::AST = {
    Item* => <>,
}

// TODO: Allow global let statements
// An AST is composed of Items
Item: ast::Item = {
    <c:ConstDeclaration> => ast::Item::Constant(c),
    Function => <>,
    Implementation => <>,
    Scene => <>,
    Struct => <>,

    // Import a local file using "import filename;"
    <l:@L> "import" <id:Ident> ";" <r:@R> => {
        ast::Item::Import {
            file_name: id.to_owned(),
            span: (l, r),
        }
    }
}

// ---------------- SCENE ----------------

Scene: ast::Item = {
    "scene" <name:Ident> <s:StatementBlock> => ast::Item::Scene {
        name: name, 
        statements: s
    },
}

// ---------------- FUNCTION ----------------

Implementation: ast::Item = {
    "impl" <id:Ident> "{" <functions:Function*> "}" => {
        ast::Item::Implementation {
            struct_name: id,
            functions,
        }
    }
}

Function: ast::Item = {
    "fn" <name:Ident> <params:FunctionParams> <return_type:("->" <TypeSpecifier>)?> <s:StatementBlock> 
    => {
        let ret = if let Some(ty) = return_type {
            ty 
        } else {
            ast::TypeSpecifier::Identifier("void".to_owned())
        };

        ast::Item::Function {
            name,
            parameters: params,
            return_type: ret,
            statements: s,
        }
    },
}

#[inline]
FunctionParams: Vec<(Option<ast::FuncParamQualifier>, String, ast::TypeSpecifier)> = {
    // TODO: Do not allow 'self' stuff outside of implementation
    "(" <self_single:(<ParamQualifier?> <Ident>)?>
        <self_comma:(<ParamQualifier?> <Ident> ",")?>
        <multi:(<ParamQualifier?> <Ident> ":" <TypeSpecifier> ",")*> 
        <single:(<ParamQualifier?> <Ident> ":" <TypeSpecifier>)?>
    ")" 
    => {
        let mut params = Vec::new();
        
        if let Some(s) = self_single {
            params.push( (s.0.clone(), s.1.to_owned(), ast::TypeSpecifier::Identifier("self".to_owned())) ); 
        } else if let Some(sc) = self_comma {
            params.push( (sc.0.clone(), sc.1.to_owned(), ast::TypeSpecifier::Identifier("self".to_owned())) ); 
        }

        params.extend_from_slice(&multi[0..]);
        
        if let Some(param) = single {
            params.push(param);
        }

        params
    },
}

#[inline]
ParamQualifier: ast::FuncParamQualifier = {
    "in" => ast::FuncParamQualifier::In,
    "out" => ast::FuncParamQualifier::Out,
    "inout" => ast::FuncParamQualifier::InOut,
}

// ---------------- STRUCT ----------------

Struct: ast::Item = {
    "struct" <name:Ident> "{" <fields:(StructFields)> "}" => {       
        ast::Item::Struct {
            name,
            fields,
        }
    },
}

#[inline]
StructFields: Vec<(String, ast::TypeSpecifier, Option<ast::Expression>)> = {
    <multi:(<Ident> ":" <TypeSpecifier> <("=" <Expression>)?> ",")*> 
    <single:(<Ident> ":" <TypeSpecifier> <("=" <Expression>)?>)?> => {
        let mut fields = multi;
        
        if let Some(field) = single {
            fields.push(field);
        }

        fields
    }
}

// ---------------- STATEMENT ----------------

Statement: ast::Statement = {
    LetStatement => <>,
    <c:ConstDeclaration> => ast::Statement::Constant(c),
    
    // TODO: Type check with owning function
    "return" <expr:(SpannedExpression)?> ";" => {
        ast::Statement::Return {
            expression: expr,
        }
    },

    AssignmentStatement => <>,

    ForLoop => <>,

    WhileLoop => <>,

    <l:@L> "continue" <r:@R> ";" => ast::Statement::Continue((l, r)),
    <l:@L> "break" <r:@R> ";" => ast::Statement::Break((l, r)),
    
    // FIXME: Can't put a SpannedExpression here for some reason
    <l:@L> <expr:Expression> <r:@R> ";" => ast::Statement::Expression {
        expression: expr,
        span: (l, r),
    },

    <l:@L> <expr:IfExpr> <r:@R> => ast::Statement::Expression{ 
        expression: expr,
        span: (l, r),
    },
}

// TODO: Allow expressions to define the range
ForLoop: ast::Statement = {
    "for" <id:Ident> "in" <from:SpannedExpression> ".." <to:SpannedExpression> <block:StatementBlock> => {
        ast::Statement::For {
            loop_var: id,
            from,
            to,
            block,
        }
    },
}

WhileLoop: ast::Statement = {
    "while" <cond:SpannedExpression> <statements:StatementBlock> => {
        ast::Statement::While {
            condition: cond,
            block: statements,
            do_while: false,
        }
    },

    "do" <statements:StatementBlock> "while" <cond:SpannedExpression> ";" => {
        ast::Statement::While {
            condition: cond,
            block: statements,
            do_while: true,
        }
    },
}

StatementBlock: Vec<ast::Statement> = {
    "{" <statements:(Statement)*> "}" => {
        statements
    },
}

AssignmentStatement: ast::Statement = {
    <lhs:SpannedExpression> <op:AssignmentOperator> <expr:SpannedExpression> ";" => {
        ast::Statement::Assignment {
            lhs,
            op,
            expression: expr,
        }
    },
}

ConstDeclaration: ast::ConstDeclaration = {
    "const" <id:Ident> <ty: (":" <TypeSpecifier>)> <expr: ("=" <SpannedExpression>)> ";" => {
        ast::ConstDeclaration {
            ident: id,
            ty: ty,
            value: expr,
        }
    }
}

LetStatement: ast::Statement = {
    <tag:("@" <Tag>)?>
    "let" <id:Ident> <ty: (":" <TypeSpecifier>)?> <expr: ("=" <SpannedExpression>)?> ";" => { 
        if ty.is_none() && expr.is_none() {
            exit!(format!("Error: Standalone let statements like 'let {};' are not yet implemented", &id));
        }
        
        ast::Statement::Let {
            ident: id,
            tag,
            ty,
            expression: expr,
        }
    },

    // let identifier: type { param1: value1, param2: value2, ...};
    "let" <id:Ident> ":" <ty:Ident> "{" <fields:(ConstructorArgs)> "}" ";" => {        
        ast::Statement::LetConstructor {
            ident: id,
            constructor: ast::Constructor {
                ty,
                fields,
            },
        }
    },
}

ConstructorArgs: Vec<(String, ast::SpannedExpression)> = {
    <multi:(<Ident> ":" <SpannedExpression> ",")*>
    <single:(<Ident> ":" <SpannedExpression>)?> => {
        let mut args = multi;
        
        if let Some(arg) = single {
            args.push(arg);
        }

        args
    },
}

// ---------------- EXPRESSION ----------------

SpannedExpression: ast::SpannedExpression = {
    <l:@L> <expr:Expression> <r:@R> => ast::SpannedExpression {
        expression: expr,
        span: (l, r),
    }
}

Expression: ast::Expression = {
    BooleanExpr => <>,
}

FunctionApply: ast::FunctionApply = {
    <name:Ident> "<-" "(" <params_multi:(<Expression> ",")*> 
                     <param_final:(<Expression>)?> ")" => {
        let mut params = params_multi;
        if let Some(param) = param_final {
            params.push(param);
        }

        ast::FunctionApply {
            name,
            func_parameters: 0usize,
            parameters: params,
            ty: "__temp__".to_owned(),
        }
    },
}

// Treated same as identifier/literal
FunctionCall: ast::FunctionCall = {
    <name:Ident> "(" <params_multi:(<Expression> ",")*>
                     <param_final:(<Expression>)?> ")"
    => {
        let mut params = params_multi;
        if let Some(param) = param_final {
            params.push(param);
        }

        ast::FunctionCall {
            name,
            parameters: params,
            ty: "__temp__".to_owned(),
        }
    },
}

IfExpr: ast::Expression = {
    // if .. else ..
    "if" <expr:BooleanExpr> <statements:StatementBlock> 
    <else_block:("else" <StatementBlock>)?>
    => {
        ast::Expression::If {
            expression: Box::new(expr),
            if_block: statements,
            else_block,
            else_if_block: None,
            ty: "__temp__".to_owned(),
        }
    },

    // if .. else if ..
    "if" <expr:BooleanExpr> <statements:StatementBlock> 
    <else_if_block:("else" <IfExpr>)>
    => {
        ast::Expression::If {
            expression: Box::new(expr),
            if_block: statements,
            else_block: None,
            else_if_block: Some(Box::new(else_if_block)),
            ty: "__temp__".to_owned(),
        }
    },
}

// Fifth precedence - left associativity
// Note that `BooleanExpr`s are always of type "bool" 
BooleanExpr: ast::Expression = {
    // TODO: Create more precedences: https://en.cppreference.com/w/cpp/language/operator_precedence
    <lhs:BooleanExpr> <op:BoolOp> <rhs:AdditiveExpr> => ast::Expression::Binary {
        lhs: Box::new(lhs),
        operator: op,
        rhs: Box::new(rhs),
        ty: "bool".to_owned(),
    },

    AdditiveExpr => <>,
}

// Fourth precedence - left associativity
AdditiveExpr: ast::Expression = {
    <lhs:AdditiveExpr> <op:AddOp> <rhs:MultiplicativeExpr> => {
        ast::Expression::Binary {
            lhs: Box::new(lhs),
            operator: op,
            rhs: Box::new(rhs),
            ty: "__temp__".to_owned(),
        }
    },

    MultiplicativeExpr => <>,
}

// Third precedence - left associativity
MultiplicativeExpr: ast::Expression = {
    <lhs:MultiplicativeExpr> <op:MultOp> <rhs:CastExpr> => {
        ast::Expression::Binary {
            lhs: Box::new(lhs),
            operator: op,
            rhs: Box::new(rhs),
            ty: "__temp__".to_owned(),
        }
    },

    CastExpr => <>,
}

// Second precedence - left associativity
CastExpr: ast::Expression = {
    <lhs:CastExpr> <op:CastOp> <rhs:UnaryExpr> => {
        ast::Expression::Binary {
            lhs: Box::new(lhs),
            operator: op,
            rhs: Box::new(rhs),
            ty: "__temp__".to_owned(),
        }
    },

    UnaryExpr => <>,
}

Member: ast::Member = {
    <single:(<IdentOrFunction> "." <IdentOrFunction>)> <multi:("." <IdentOrFunction>)*> => {
        let mut path = multi;
        let (first, second) = single;
        path.insert(0, second);
        path.insert(0, first);
        
        ast::Member {
            path,
            ty: "__temp__".to_owned(),
        }
    }
}

#[inline]
IdentOrFunction: ast::IdentOrFunction = {
    Ident => ast::IdentOrFunction::Ident(<>),
    FunctionCall => ast::IdentOrFunction::Function(<>),
}

UnaryExpr: ast::Expression = {    
    "-" <UnaryExpr> => {
        ast::Expression::Unary {
            operator: ast::UnaryOperator::Negate,
            expr: Box::new(<>),
            ty: "__temp__".to_owned(),
        }
    },
    
    "!" <UnaryExpr> => {
        ast::Expression::Unary {
            operator: ast::UnaryOperator::Not,
            expr: Box::new(<>),
            ty: "__temp__".to_owned(),
        }
    },
    
    BaseExpr => <>,
}

// First precedence - right associativity (for unary ops)
BaseExpr: ast::Expression = {
    "(" <expr:Expression> ")" => ast::Expression::Parenthesized(Box::new(expr)),

    "[" <expressions_multi:(<Expression> ",")*> 
        <expressions_single:(<Expression>)> 
    "]" => {
        let mut expressions = expressions_multi;
        expressions.push(expressions_single);

        ast::Expression::ArrayConstructor {
            expressions: expressions.into_iter().map(|e| Box::new(e)).collect(),
            ty: "__temp__".to_owned(),
        }
    },

    Member => ast::Expression::Member(<>),

    Literal => ast::Expression::Literal(<>),

    Ident => {
        ast::Expression::Identifier(<>)
    },

    FunctionCall => {
        ast::Expression::FunctionCall(<>)
    },

    FunctionApply => {
        ast::Expression::FunctionApply(<>)
    },

    <b:BaseExpr> "[" <index_expr:Expression> "]" => {
        ast::Expression::Unary {
            operator: ast::UnaryOperator::Index(Box::new(index_expr)),
            expr: Box::new(b),
            ty: "__temp__".to_owned(),
        }
    }
}

#[inline]
CastOp: ast::BinaryOperator = {
    "as" => ast::BinaryOperator::Cast,
}

#[inline]
AssignmentOperator: ast::AssignmentOperator = {
    "=" => ast::AssignmentOperator::Assign,
    "+=" => ast::AssignmentOperator::AddAssign,
    "-=" => ast::AssignmentOperator::SubtractAssign,
    "*=" => ast::AssignmentOperator::MultiplyAssign,
    "/=" => ast::AssignmentOperator::DivideAssign,
}

#[inline]
MultOp: ast::BinaryOperator = {
    "*" => ast::BinaryOperator::Multiply,
    "/" => ast::BinaryOperator::Divide,
}

#[inline]
AddOp: ast::BinaryOperator = {
    "+" => ast::BinaryOperator::Plus,
    "-" => ast::BinaryOperator::Minus,
}

#[inline]
BoolOp: ast::BinaryOperator = {
    "==" => ast::BinaryOperator::EqualTo,
    "!=" => ast::BinaryOperator::NotEqualTo,
    ">=" => ast::BinaryOperator::GreaterThanOrEqualTo,
    "<=" => ast::BinaryOperator::LessThanOrEqualTo,
    ">" => ast::BinaryOperator::GreaterThan,
    "<" => ast::BinaryOperator::LessThan,
    "&&" => ast::BinaryOperator::And,
    "||" => ast::BinaryOperator::Or,
}

// ---------------- IDENTIFIER, LITERAL, TAG ----------------

TypeSpecifier: ast::TypeSpecifier = {
    <i:Ident> => ast::TypeSpecifier::Identifier(i),
    "[" <i:Ident> ";" <size:r"[0-9]+"> "]" => ast::TypeSpecifier::Array {
        ty: i.to_owned(),
        size: size.parse::<u32>().unwrap(),
    },
}

Ident: String = {
    <VEC_IDENTIFIER> => <>.to_owned(),

    <r"[_a-zA-Z]+[_a-zA-Z0-9]*"> => {        
        // TODO: Reserve "__ident__..." for code generation

        <>.to_owned()
    },
}

#[inline]
Tag: ast::Tag = {
    "uniform" => ast::Tag::Uniform,
    "texture2D" => ast::Tag::Texture2D,
    "out" => ast::Tag::Out,
}

Literal: ast::Literal = {
    // GLSL defaults values to "int" rather than "uint"
    <int:r"[0-9]+"> => ast::Literal::Int(int.parse::<i32>().unwrap()),
    <float:r"[0-9]+[.][0-9]*"> => ast::Literal::Float(float.parse::<f32>().unwrap()),
    <boolean:BOOL> => ast::Literal::Bool(boolean.parse::<bool>().unwrap()),
}