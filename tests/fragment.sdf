@FRAGMENT

features {
    time, 
    window_dimensions,
}

import sd_primitives;

const MAX_STEPS:        int   = 128;
const MAX_DISTANCE:     float = 70.;
const SURFACE_DISTANCE: float = 0.001;

struct Camera {
    position: vec3 = vec3(0., 4., -5.),
    lookat: vec3 = vec3(0.),
    zoom: float = 1.5,
}

impl Camera {
    fn ray_direction(in self, uv: vec2) -> vec3 {
        let forward = normalize(self.lookat - self.position);
        let right   = normalize(cross(vec3(0., 1., 0.), forward));
        let up      = cross(forward, right);

        return normalize(uv.x*right + uv.y*up + self.zoom*forward);
    }
}

fn map(point: vec3) -> float {
    let ground_plane = sd_plane(point - vec3(0., 0., 0.), vec3(0., 1., 0.));
 
    let wavy_sphere = sd_sphere(point - vec3(-1., 0.6, 0.), 0.5);
    wavy_sphere -= sin(point.x*3. + time*2.)*0.15;
    wavy_sphere *= 0.9;

    let sphere2 = sd_sphere(point - vec3(0., sin(time)*0.2+0.3, -0.3), 0.4);
    
    let box = sd_box(point - vec3(1., 0.5, 0.), vec3(0.4));


    return min <- (ground_plane, wavy_sphere, box, sphere2);
}

// From iq's usual implementation
fn get_normal(point: vec3) -> vec3 {
    let epsilon = vec2(1., -1.) * 0.5773*0.0005;

    return normalize(
        epsilon.xyy * map( point + epsilon.xyy ) +
        epsilon.yyx * map( point + epsilon.yyx ) +
        epsilon.yxy * map( point + epsilon.yxy ) +
        epsilon.xxx * map( point + epsilon.xxx ) );
}

fn march(ray_origin: vec3, ray_direction: vec3) -> float {
    let distance = 0.;

    for i in 0 .. MAX_STEPS {
        let current_position = ray_origin + ray_direction * distance;
        let scene_distance = map(current_position);
        distance += scene_distance;

        if (distance > MAX_DISTANCE) || (abs(scene_distance) < SURFACE_DISTANCE) {
            break;
        }
    }

    return distance;
}

// iq's AO
fn ambient_occlusion(point: vec3, normal: vec3) -> float {
    let occlusion = 0.0;
    let sca = 1.0;
    for i in 0 .. 5 {
        let hr = 0.001 + 0.15 * i as float / 4.0;
        let dist = map(point + hr*normal);

        occlusion += (hr - dist)*sca;
        sca *= 0.95;
    }

    return clamp(1. - 1.5*occlusion, 0., 1.);
}

// shane's AO
fn ambient_occlusion2(point: vec3, normal: vec3) -> float {
    let occlusion = 0.;
    // Darkness scaling (higher = darker shading)
    let sca = 1.5;
    // Width of the occlusion (higher = wider shadows)
    let width = 0.25;
    for i in 0 .. 5 {
        let hr = (i + 1) as float * width/5.;        
        let dist = map(point + hr*normal);
        occlusion += (hr - dist)*sca;
        sca *= 0.7;
    }
    
    return clamp(1. - occlusion, 0., 1.);  
}

// FIXME: Shadows are off from source. Maybe lack of material causes this?
// https://www.shadertoy.com/view/WdyXRD
fn approximate_soft_shadow(point: vec3, light_direction: vec3, mint: float, maxt: float, light_size: float) -> float {
    let t = mint;

    let res = 1.;
    for i in 0 .. 256 {
        let dist = map(point + t*light_direction);
        res = min(res, dist / (light_size*t));
        t += clamp(dist, 0.005, 0.5);
        if res < -1. || t > maxt {
            break;
        }
    }
    res = max(res, -1.0);

    return 0.25 * (1. + res) * (1. + res) * (2. - res);
}

fn get_diffused_light(point: vec3, light_pos: vec3, normal: vec3) -> float {
    let light_direction = normalize(light_pos - point);

    let diffused_light = dot(normal, light_direction);
    diffused_light = clamp(diffused_light, 0., 1.);

    let dist = march(point + normal*SURFACE_DISTANCE*2., light_direction);

    // Hard shadows
    // if dist < length(light_pos - point) {
    //     diffused_light *= 0.1;
    // }

    return diffused_light;
}

fn render(ray_origin: vec3, ray_direction: vec3) -> vec3 {
    let color = vec3(0.);

    let dist = march(ray_origin, ray_direction);
    let position = ray_origin + ray_direction * dist;

    let normal = get_normal(position);

    let light = get_diffused_light(position, vec3(5, 4., -5.), normal);
    color = vec3(light);
    color *= approximate_soft_shadow(position, normalize(vec3(5, 4., -5.)), 0.01, 3., 0.1);

    // Fake fill light (temporary)
    color += 0.04;

    color *= ambient_occlusion(position, normal);

    // Fog
    color = mix(color, vec3(0.08, 0.1, 0.2)*3., 1. - exp(-0.001 * dist * dist));
    

    // Post-processing

    // Tone-map (remove blown out highlights)
    color = 1. - exp(-color);
    // Gain (helps add back some "punch" removed by tone-map)
    color = 1.8*color/(1.0+dot(color,vec3(0.333)));
    // Gamma correction (1/2.2)
    color = pow(color, vec3(0.4545));
    // Saturation/contrast
    color = smoothstep(0., 1., color);

    return color;
}

// Render with specified antialiasing (MSAA) amount
fn render_AA(camera: Camera, AA: int) -> vec3 {
    let total = vec3(0.);

    for x in 0 .. AA {
    for y in 0 .. AA {
        let offset = vec2(x, y) / AA as float - 0.5;
        let point = (-window_dimensions + 2.*(gl_FragCoord.xy + offset)) / window_dimensions.y;

        total += render(camera.position, camera.ray_direction(point));
    }}
    total /= (AA * AA) as float;

    return total;
}

fn main() {
    let camera: Camera {
        position: vec3(sin(time*0.3)*3., 1., cos(time*0.3)*3.),
    };

    let color: vec3;

    let use_AA = true;

    if use_AA {
        color = render_AA(camera, 2);
    } else {   
        // [-1, 1], then scale x to aspect ratio
        let uv = (gl_FragCoord.xy / window_dimensions - 0.5) * 2.;
        uv.x *= window_dimensions.x / window_dimensions.y;

        let ray_direction = camera.ray_direction(uv);
        color = render(camera.position, ray_direction);
    }
	
	// Magic banding-removal function by iq : https://www.shadertoy.com/view/3lj3DW
	color += fract(sin(gl_FragCoord.x*vec3(13,1,11)+gl_FragCoord.y*vec3(1,7,5))*158.391832)/255.0;

    
    out_color = vec4(color, 1.);
}