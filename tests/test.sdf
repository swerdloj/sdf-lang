/*
    Very simple example of sdf-lang
*/

// Fields must be typed. May have defaults. Final comma optional.
struct SomeStruct {
    field1: float = 2.3,
    no_default: int,
    another_default: int = 123,
    no_final_comma: int = 9,
}

impl SomeStruct {
    fn some_function(self) {
        let var: double = 1 - 1.2 as int * 3;
        self;
    }

    fn another_member(self) {
        // TODO: Make this work
        // self.no_default += 3;
    }
}

fn void_function() {
    let z = 7;
    let a = 123.2 as int;
}

fn int_function() -> int {
    return 12;
}

// Functions are the same as Rust
fn function(param1: float, param2: int) -> bool {
    // Parameters are added to the current scope
    param1 += 3;

    // Type inferrence
    let var = true;
    let z = 7.33;

    z += z + 2 - -int_function();
    z *= 123;

    let inferred_from_variable = z + 5;

    // let inferred_from_function = void_function(); // cannot assign to void type
    let inferred_from_function = int_function() * 2;

    return 1 / 2 != 8.3 != !var;
}

fn constructors() {
    // Cannot use reserved prefix 'gl_'
    // let gl_variable = 12;

    // Uniforms are moved to global scope
    @uniform
    let test: int = 8;

    // Constructors are automatically ordered and defaults are filled in (if not supplied)
    let some_struct: SomeStruct {
        another_default: 321,
        no_default: 7 + 3 - int_function(),
        field1: 12,
    };

    function(1.3, -12);
}

fn bool_function() -> bool {
    return true;
}

fn if_expressions() {
    let x: int = 12;
    let y = 12;

    if x == y {
        let nested = 12;
        // Shadowing
        let x = 5;
        x += nested;
    } else if true {
        // Now out of scope
        // nested += 5;
        x -= 1;
    } else if false {
        if true {
            12;
        }
        false;
    } else {
        true;
    }

    if 1 == 1 && 2 == 2 {
        1 + 2;
    }

    // Conditions must be boolean types
    // if 1 + 2 {}
    if bool_function() {}
}

// Scenes will allow for SDF interactions (point manipulation, etc.)
scene main {
    @uniform
    let x: int = 1 + -2 * 3;

    let s: SomeStruct {
        field1: x,
        no_default: x * 3,
        no_final_comma: 4 * 3 + 1
    };

    function(1.0, 2);

    let y: bool = true && false;
}