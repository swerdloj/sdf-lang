fn sd_plane(point: vec3, normal: vec3) -> float {
    return dot(point, normalize(normal));
}

fn sd_sphere(point: vec3, radius: float) -> float {
    return length(point) - radius;
}

fn sd_box(point: vec3, dimensions: vec3) -> float {
    return max(max(abs(point.x) - dimensions.x, abs(point.y) - dimensions.y), abs(point.z) - dimensions.z);
}

struct Camera {
    position: vec3 = vec3(0., 4., -5.),
    lookat: vec3 = vec3(0.),
    zoom: float = 1.5,
}

impl Camera {
    fn ray_direction(self, uv: vec2) -> vec3 {
        let forward = normalize(self.lookat - self.position);
        let right   = normalize(cross(vec3(0., 1., 0.), forward));
        let up      = cross(forward, right);

        return normalize(uv.x*right + uv.y*up + self.zoom*forward);
    }
}

// FIXME: Temporary hack until '<-' syntax works with builtin functions
fn min2(f1: float, f2: float) -> float {
    return min(f1, f2);
}

fn map(point: vec3) -> float {
    let ground_plane = sd_plane(point - vec3(0., -1., 0.), vec3(0., 1., 0.));
 
    let sphere = sd_sphere(point - vec3(-1., 0., 0.), 0.5);
    sphere -= sin(point.x*3. + time*2.)*0.15;
    sphere *= 0.9;   
    
    let box = sd_box(point - vec3(1., 0., 0.), vec3(0.4));


    return min2 <- (ground_plane, sphere, box);
}

// From iq's usual implementation
fn get_normal(point: vec3) -> vec3 {
    let epsilon = vec2(1., -1.) * 0.5773*0.0005;

    return normalize(
        epsilon.xyy * map( point + epsilon.xyy ) +
        epsilon.yyx * map( point + epsilon.yyx ) +
        epsilon.yxy * map( point + epsilon.yxy ) +
        epsilon.xxx * map( point + epsilon.xxx ) );
}

fn march(ray_origin: vec3, ray_direction: vec3) -> float {
    let max_steps = 100;
    let max_distance = 70.;
    let surface_distance = 0.001;

    let distance = 0.;

    for i in 0 .. max_steps {
        let current_position = ray_origin + ray_direction * distance;
        let scene_distance = map(current_position);
        distance += scene_distance;

        if (distance > max_distance) || (abs(scene_distance) < surface_distance) {
            break;
        }
    }

    return distance;
}

fn get_diffused_light(point: vec3, light_pos: vec3) -> float {
    let light_direction = normalize(light_pos - point);
    let normal = get_normal(point);

    let diffused_light = dot(normal, light_direction);
    diffused_light = clamp(diffused_light, 0., 1.);

    let dist = march(point + normal*0.001*2., light_direction);

    if dist < length(light_pos - point) {
        diffused_light *= 0.1;
    }

    return diffused_light;
}

fn render(ray_origin: vec3, ray_direction: vec3) -> vec3 {
    let color = vec3(0.);

    let dist = march(ray_origin, ray_direction);
    let position = ray_origin + ray_direction * dist;

    let light = get_diffused_light(position, vec3(5, 2., -5.));
    color = vec3(light);

    // Fog
    color = mix(color, vec3(0.1, 0.1, 0.2), 1. - exp(-0.001 * dist * dist));

    // Gamma
    color = pow(color, vec3(0.4545));

    return color;
}

// Render with specified antialiasing amount
fn render_AA(camera: Camera, AA: int) -> vec3 {
    let total = vec3(0.);

    for x in 0 .. AA {
    for y in 0 .. AA {
        let offset = vec2(x, y) / AA as float - 0.5;
        let point = (-window_dimensions + 2.*(gl_FragCoord.xy + offset)) / window_dimensions.y;

        total += render(camera.position, camera.ray_direction(point));
    }}
    total /= (AA * AA) as float;

    return total;
}

fn main() {
    let camera: Camera {
        position: vec3(sin(time*0.3)*2., 1., -3.),
    };

    let color: vec3;

    let use_AA = true;

    if use_AA {
        color = render_AA(camera, 2);
    } else {   
        // [-1, 1], then scale x to aspect ratio
        let uv = (gl_FragCoord.xy / window_dimensions - 0.5) * 2.;
        uv.x *= window_dimensions.x / window_dimensions.y;

        let ray_direction = camera.ray_direction(uv);
        color = render(camera.position, ray_direction);
    }

    
    out_color = vec4(color, 1.);
}